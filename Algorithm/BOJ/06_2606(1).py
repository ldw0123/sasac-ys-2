# 바이러스 (2606) Silver III
# DFS

n = int(input())  # 컴퓨터의 수 입력받기(정점의 수)
v = int(input())  # 컴퓨터 사이에 연결된 선의 개수(가장자리 수)

# (n+1)만큼 빈 2차원 리스트를 생성(인접 행렬), n+1을 하는 이유는 n번 컴퓨터를 n번 인덱스로 쓰기 위해
graph = [[] for i in range(n+1)]
visited = [0]*(n+1)  # (n+1) 길이의 0으로 이루어진 리스트 (0: 미방문, 1: 방문)

for i in range(v):  # 그래프 생성, 연결선의 개수만큼 for문을 반복해 연결된 컴퓨터 번호를 각각 a, b로 입력받기
    a, b = map(int, input().split())
    graph[a] += [b]  # a에 b를 연결
    # b에 a를 연결 (쌍방 연결 / 1번에 2번이 연결되어 있고, 2번에 1번이 연결되어 있음을 나타내기 위함)
    graph[b] += [a]


def dfs(m):
    visited[m] = 1  # 방문할 컴퓨터 번호를 m으로 입력받고, 방문 표시를 한다.
    for i in graph[m]:  # graph[m]는 m번 컴퓨터에 연결된 컴퓨터들의 리스트
        if visited[i] == 0:  # 각 컴퓨터를 i로 반복해 방문 여부를 검사하고, 만약 방문되지 않았다면(== 0)
            dfs(i)  # 재귀 호출을 통해 해당 컴퓨터를 방문한다. 이 과정을 반복


dfs(1)
print(sum(visited)-1)  # 1번 컴퓨터를 제외하고 1번 컴퓨터와 연결된 컴퓨터 개수를 출력해야 하므로 -1 함
